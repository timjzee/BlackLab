(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{307:function(t,a,s){"use strict";s.r(a);var e=s(13),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"example-xpaths"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-xpaths"}},[t._v("#")]),t._v(" Example XPaths")]),t._v(" "),a("p",[a("RouterLink",{attrs:{to:"/guide/how-to-configure-indexing.html#xpath-support-level"}},[t._v("When using Saxonica")]),t._v(" you have extensive possibilities using XPath in BlackLab configuration. Some noteworthy examples are shown below (thanks @eduarddrenth).")],1),t._v(" "),a("h2",{attrs:{id:"punctpath"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#punctpath"}},[t._v("#")]),t._v(" punctPath")]),t._v(" "),a("p",[t._v("To capture text content between "),a("code",[t._v("<w/>")]),t._v(" tags:")]),t._v(" "),a("p",[a("code",[t._v(".//text()[.!='' and preceding-sibling::tei:w]|.//tei:pc |.//tei:lb")])]),t._v(" "),a("h2",{attrs:{id:"valuepath"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#valuepath"}},[t._v("#")]),t._v(" valuePath")]),t._v(" "),a("p",[t._v("A more complex expression with conditionals and variables:")]),t._v(" "),a("p",[a("code",[t._v("let $xid := @xml:id return if (@lemma) then @lemma else if ($xid) then following-sibling::tei:join[@lemma][matches(@target,'#'||$xid||'( |$)')]/@lemma else ()")])]),t._v(" "),a("ul",[a("li",[t._v("use of if then else can significantly speed up processing")]),t._v(" "),a("li",[t._v("variables in xpath obsolete the need for captureValuePaths")])]),t._v(" "),a("h2",{attrs:{id:"advanced"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#advanced"}},[t._v("#")]),t._v(" Advanced")]),t._v(" "),a("p",[t._v("You can also do stuff like this:")]),t._v(" "),a("div",{staticClass:"language-xquery extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xquery"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$w")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/")]),t._v("tei"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),t._v("xml"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$xid")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$w")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),t._v("xml"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("id\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$w")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),t._v("lemma"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$w")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),t._v("lemma "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$xid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$join")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$w")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token axis operator"}},[t._v("following-sibling")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("tei"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("join"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),t._v("lemma"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("matches")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$xid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'( |$)'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),t._v("lemma "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);